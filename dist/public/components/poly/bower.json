{
  "name": "poly",
  "version": "0.5.2",
  "gitHead": "5994097eda25e94a1beffaa33a1689583bda65d4",
  "readme": "Code to modern standards. Run everywhere.\n=========\n\nLicense: MIT\n\npoly.js is the a collection of AMD modules that shim (aka \"polyfill\")\nold browsers to support modern (aka \"ES5-ish\") javascript.\n\npoly.js is unique amongst ES5-ish shims because it:\n\n* is modular, not monolithic\n* is tiny\n* is configurable to suit your code\n* can be minified using a has-aware optimizer\n\nNote: poly/strict has been deprecated. See below.\n\nSupport\n---\n\nIssues: https://github.com/cujojs/poly/issues\n\nDiscussion: https://groups.google.com/d/forum/cujojs\n\n\nWhat's new\n---\n\n* 0.5.2\n\t* Implement setImmediate/clearImmediate as a temporary, non-standard method\n\t  for performant task queueing.\n\t* New poly/es5 and poly/es5-strict modules. poly/strict is deprecated.\n\t* Use @kitcambridge's JSON3 instead of JSON2\n\t* Date shim now keeps properties on Date constructor and keeps the name\n\t  of the constructor \"Date\" (was previously \"_Date\")\n\t* Fix bugs in Object shims in IE 6-8.\n\nFeatures\n---\n\npoly augments browsers with all of the following features:\n\npoly/array:\n---\n\n* array.forEach\n* array.map\n* array.some\n* array.every\n* array.indexOf\n* array.lastIndexOf\n* array.reduce\n* array.reduceRight\n* Array.isArray\n\npoly/function:\n---\n\n* func.bind\n\npoly/json:\n---\n\n* (global) JSON\n\npoly/setImmediate:\n---\n\n* (global) setImmediate\n* (global) clearImmediate\n\nNote: setImmediate is not expected to become standardized, but is included\nhere as an interim solution as a performant next-turn implementation.\n\npoly/object:\n---\n\n* Object.create *\n* Object.freeze *\n* Object.isFrozen *\n* Object.seal *\n* Object.isSealed *\n* Object.getPrototypeOf\n* Object.keys\n* Object.getOwnPropertyNames\n* Object.defineProperty *\n* Object.defineProperties *\n* Object.isExtensible\n* Object.preventExtensions *\n* Object.getOwnPropertyDescriptor *\n\nMethods marked with * cannot be shimmed completely. You can decide whether\nthese methods should fail silently or loudly.  The poly/object and poly/all\nmodules return a function, `failIfShimmed`, that takes a single parameter.\n\nThis parameter may be:\n\n* a boolean (all Object.XXX functions should fail)\n* a function that takes a method name as a parameter and return truthy/falsey\n\nBy default, poly/object will not throw any exceptions and allows non-functional\nor incomplete shims to fail silently.  poly/all works the same way.  However,\npoly/strict sets `failIfShimmed` so that poly/object will throw\nexceptions for some functions.  (see below)\n\nObject.getPrototypeOf works in all situations except when using raw\nprototypal inheritance in IE6-8.  This is due to a well-known IE bug that\nclobbers the constructor property on objects whose constructor has a prototype.\n\nBy \"raw\", we mean the following:\n\n```js\nfunction MyClass () {}\nMyClass.prototype = { foo: 42 };\nvar obj = new MyClass();\nconsole.log(obj.constructor == MyClass); // false in IE6-8\n```\n\nThe workaround is to set the constructor explicitly:\n\n```js\nfunction MyClass () {}\nMyClass.prototype = { foo: 42, constructor: MyClass };\nvar obj = new MyClass();\nconsole.log(obj.constructor == MyClass); // true everywhere!!!!!\n```\n\nMost inheritance helper libs, including John Resig's Simple Inheritance, dojo,\nand prototype.js already do this for you.\n\npoly/string:\n---\n\n* string.trim\n* string.trimLeft\n* string.trimRight\n\npoly/xhr:\n---\n\n* (global) XMLHttpRequest\n\npoly/date:\n---\n\n* Date.parse now supports simplified ISO8601 date strings\n* new Date() now supports simplified ISO8601 date strings\n* date.toISOString() returns a simplified ISO8601 date string\n\npoly/all (also just \"poly\"):\n---\n\nThis is a *convenience module* to load and apply all shims.  Shims that have\nvarying levels of \"strictness\" are set to be loose.  Use poly/strict or\ncreate your own version of poly/all to be stricter.\n\nThe \"poly\" main module will load poly/all.\n\npoly/es5:\n---\n\nThis *convenience module* loads and applies all es5 shims.  Shims, such as\npoly/setImmediate are not included.\n\npoly/strict:\n---\n\nThis is module is deprecated.  Please use poly/es5-strict.\n\npoly/es5-strict:\n---\n\nThis *convenience module* loads and applies all es5 shims, but ensures that\nwhitespace characters comply with ES5 specs (many browsers don't do this)\nand fails loudly for the following object shims that can't reasonably\nbe shimmed to comply with ES5:\n\n* Object.defineProperty\n* Object.defineProperties\n* Object.preventExtensions\n* Object.getOwnPropertyDescriptor\n* Object.create (but only if supplying the second parameter)\n\nIf you would like your code to be even stricter, load poly/object or poly/string\nseparately and set the desired level of strictness.\n\nExamples\n==========\n\nSample AMD package declaration:\n\n```js\nvar cfg = {\n\tpackages: [\n\t\t{ name: 'poly', location: 'js/poly-0.5', main: 'poly' }\n\t]\n};\n```\n\nSample AMD package declaration (strict):\n\n```js\nvar cfg = {\n\tpackages: [\n\t\t{ name: 'poly', location: 'js/poly-0.5', main: 'strict' }\n\t]\n};\n```\n\nUsing poly's modules as shims / polyfills:\n\n```js\n\t// somewhere in your app's initialization code, load the \"poly/array\"\n\t// and \"poly/function\" module\n\t// and it will shim the native Array prototype\n\tcurl({ preloads: [ \"poly/array\" ] });\n\n\t// later, just use arrays as if the js engine supports javascript 1.7!\n\tdefine(/* my module */ function () {\n\n\t\t// Arrays are so hawt!\n\n\t\treturn {\n\n\t\t\tmyFunc: function (arr, process) {\n\n\t\t\t\tarr.forEach(function (item) {\n\n\t\t\t\t\tprocess(item);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t});\n```\n\n```js\n\t// use all available shims\n\tcurl({ preloads: [ \"poly/all\" ] });\n```\n\n```js\n\t// another way to use all available shims\n\tcurl({ preloads: [ \"poly\" ] });\n```\n\n```js\n\t// use all shims in, but with stronger ES5 compliance\n\tcurl({ preloads: [ \"poly/strict\" ] });\n```\n\n```js\n\t// use just the array and function shims\n\tcurl({ preloads: [ \"poly/array\", \"poly/function\" ] });\n```\n\nHow do I know which shims to use?\n===\n\nIf you've written the code, you probably know what ES5-ish features you've used.\nIf you're using `func.bind()`, you should load the poly/function module.  If\nyou're using `str.trim()`, you will need the poly/string module.\n\nIf you're leveraging code that is meant to run in a CommonJS environment, you\nprobably need all of poly's shims except poly/xhr.  (Note:\n[curl.js](https://github.com/cujojs/curl) can load CommonJS Modules/1.1 files\nwithout pre-wrapping them in an AMD \"transport\" wrapper.  Check out the\n[moduleLoader](https://github.com/cujojs/curl/wiki/Using-curl.js-with-CommonJS-Modules)\npackage config option.)\n\nIf you're using poly.js with wire.js, you will need the following shims\nto use wire.js in all browsers: poly/array, poly/function, poly/object.\n\nHow can I limit the size of the shim modules?\n---\n\npoly.js supports has-aware AMD optimizers.  dojo's build tool and RequireJS's\nr.js optimizer will automatically remove unneeded shims when provided a \"has\nprofile\".  Please refer to either of those optimization tools for more\ninformation about using and creating a \"has profile\".\n\nCan I use feature detection to only load the shims the current browser requires?\n---\n\nUnfortunately, browser's didn't adopt ES5 features over night. There are various\ndegrees of ES5-ishness in the wild.  Therefore, there is no _magic test_ that\nyou can use to determine whether to load an ES5-ish shim or not.\n\nHowever, if you limit your supported browser list, you may be able to make\ncertain assumptions.  For instance, if you limit your supported browsers to IE6+\nand the latest version for the remainder of the vendors, you could choose\na fairly broad test.  Something like the following is fairly safe:\n\n```js\nvar preloads = [];\nif (typeof Object.preventExtensions != 'function') {\n\tpreloads.push('poly/all');\n}\ncurl({ preloads: preloads });\n```\n\nIf your list of supported browsers isn't so clean, try taking a survey of your\ncode so you can find a reasonable set of tests.  The following is a possible\nset of tests for a project that uses object, function, and string shims:\n\n```js\nvar preloads = [];\nif (typeof Object.preventExtensions == 'function') {\n\tpreloads.push('poly/object');\n}\nif (typeof Function.prototype.bind != 'function') {\n\tpreloads.push('poly/function');\n}\nif (typeof \"\".trim != 'function') {\n\tpreloads.push('poly/string');\n}\ncurl({ preloads: preloads });\n```\n\nJSON3\n===\n\nJSON support via Kit Cambridge's JSON3 lib at:\nhttps://github.com/bestiejs/json3.git\n",
  "readmeFilename": "README.md",
  "_id": "poly@0.5.2",
  "description": "Code to modern standards. Run everywhere. =========",
  "repository": {
    "type": "git",
    "url": "git://github.com/cujojs/poly"
  }
}
